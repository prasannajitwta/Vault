def A_star(start,end):
    open_set=set(start)
    closed_set=set()
    g={}
    parents={}
    g[start]=0
    parents[start]=start
    while len(open_set)>0:
        n=None
        for v in open_set:
            if n==None or g[v]+heuristic(v)<g[n]+heuristic(n):
                n=v      
        if n==end or graph_nodes[n]==None:
            pass
        else:
            for(m,weight) in get_neighbours(n):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    parents[m]=n
                    g[m]=g[n]+weight
                else:
                    if g[m]>g[n]+weight:
                        g[m]=g[n]+weight
                        parents[m]=n
                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)
                    if n==None:
                        print("Path doesnt exist ")
                        return None
                    if n==end:
                        path=[]
                        while parents[n]!=n:
                            path.append(n)
                            n=parents[n]
                        print(path)
                    path.append(start_node)
                    path.reverse()
                    print("optimal Path: ")
                    return path
            open_set.remove(n)
            closed_set.add(n)
            print(closed_set)
            print(open_set)
        print("path doesnt exist ")
        return None
            
def get_neighbours(v):
    if v in graph_nodes:
        return graph_nodes[v]
    else:
        return None
def heuristic(n):
    H_dist={
            'S':8,
            'A':8,
            'B':4,
            'C':3,
            'D':99,
            'E':99,
            'G':0
            }
    return H_dist[n]

graph_nodes={           
    'S':[['A',1],['B',5],['C',8]],
    'A':[['D',4],['E',7],['G',9]],
    'B':[['G',4]],
    'C':[['G',5]],
    'D':None,
    'E':None
    }

A_star('S','G')